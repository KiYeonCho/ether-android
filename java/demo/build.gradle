apply plugin: 'com.android.application'

android {
    compileSdkVersion 23
    buildToolsVersion "27.0.3"
    //useLibrary 'org.apache.http.legacy'

    defaultConfig {
        applicationId "kr.ac.korea_blockshield"
        minSdkVersion 16
        targetSdkVersion 23
        versionCode 10107
        versionName "1.1.7"

        //testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        ndk {
            abiFilters 'armeabi', 'armeabi-v7a', 'arm64-v8a', 'x86'
        }
        multiDexEnabled true
    }
    dexOptions {
        jumboMode true
        javaMaxHeapSize "4g"
    }

    packagingOptions {
        exclude('org/apache/commons/codec/*')
    }

    buildTypes {
//        debug {
//            minifyEnabled false
//            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard.cfg'
//            //debuggable true
//            //versionNameSuffix '-debug'
//        }
//
//        release {
//            minifyEnabled true
//            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard.cfg'
//            //debuggable false
//        }
    }

    lintOptions {
        abortOnError false
    }

    packagingOptions {
        exclude('META-INF/ASL2.0')
        exclude('META-INF/LICENSE')
        exclude('META-INF/MANIFEST.MF')
        exclude('META-INF/NOTICE')
        exclude('META-INF/DEPENDENCIES')
        exclude('META-INF/LICENSE.txt')
        exclude('META-INF/NOTICE.txt')
    }

    applicationVariants.all { variant ->
        variant.javaCompile.doLast {
            runAllatori(variant)
        }
    }

}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

// aars 폴더 정의
repositories {
    flatDir {
        dirs project(':app').file('aars')
    }
}

dependencies {
    compile project(':swf')
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:multidex:1.0.0'
    compile 'com.android.support:appcompat-v7:23.4.0'
    compile 'com.android.support.constraint:constraint-layout:1.0.2'
    compile 'org.web3j:core:3.3.1-android'

    compile project(':simpleauthui')
    compile(name: 'simpleauth_v1.0.1_20190319_145346-release', ext: 'aar')

}

def runAllatori(variant) {
    copy {
        from "$projectDir/allatori.xml"
        into "$buildDir/intermediates/classes/"
        expand(classesRoot: variant.javaCompile.destinationDir,
                androidJar: "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar",
                classpathJars: variant.javaCompile.classpath.getAsPath(),
                logFile: "allatori-log-${variant.name}.xml")
        rename('allatori.xml', "allatori-${variant.name}.xml")
    }

    new File("${variant.javaCompile.destinationDir}-obfuscated").deleteDir()
    javaexec {
        main = 'com.allatori.Obfuscate'
        classpath = files("$rootDir/allatori/allatori.jar")
        args "$buildDir/intermediates/classes/allatori-${variant.name}.xml"
    }
    new File("${variant.javaCompile.destinationDir}").deleteDir()
    new File("${variant.javaCompile.destinationDir}-obfuscated").renameTo(new File("${variant.javaCompile.destinationDir}"))
}
